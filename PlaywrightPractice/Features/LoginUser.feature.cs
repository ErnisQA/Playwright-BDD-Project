// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Playwright.Framework.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Login HR Sale")]
    public partial class LoginHRSaleFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "LoginUser.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-EN"), "Features", "Login HR Sale", "This is Demo Playwright.\r\nUsing: POM, Dependency Injection, ConfigReader(ASP.NET " +
                    "Core)", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify User Login HRSale successfully")]
        [NUnit.Framework.CategoryAttribute("TC001")]
        [NUnit.Framework.CategoryAttribute("LoginSuccess")]
        public async System.Threading.Tasks.Task VerifyUserLoginHRSaleSuccessfully()
        {
            string[] tagsOfScenario = new string[] {
                    "TC001",
                    "LoginSuccess"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify User Login HRSale successfully", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
 await testRunner.GivenAsync("Navigate to \'HRSale\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "fields",
                            "value"});
                table1.AddRow(new string[] {
                            "Username",
                            "Super Admin"});
                table1.AddRow(new string[] {
                            "Password",
                            "Super Admin"});
#line 11
 await testRunner.WhenAsync("Input with following Username and Password", ((string)(null)), table1, "When ");
#line hidden
#line 15
 await testRunner.ThenAsync("Verify User login successfully with message \'Logged In Successfully.\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 16
 await testRunner.ThenAsync("Click Logout button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "fields",
                            "value"});
                table2.AddRow(new string[] {
                            "Username",
                            "Employee"});
                table2.AddRow(new string[] {
                            "Password",
                            "Employee"});
#line 19
 await testRunner.WhenAsync("Input with following Username and Password", ((string)(null)), table2, "When ");
#line hidden
#line 23
 await testRunner.ThenAsync("Verify User login successfully with message \'Logged In Successfully.\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
 await testRunner.ThenAsync("Click Logout button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "fields",
                            "value"});
                table3.AddRow(new string[] {
                            "Username",
                            "Client"});
                table3.AddRow(new string[] {
                            "Password",
                            "Client"});
#line 27
 await testRunner.WhenAsync("Input with following Username and Password", ((string)(null)), table3, "When ");
#line hidden
#line 31
 await testRunner.ThenAsync("Verify User login successfully with message \'Logged In Successfully.\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
 await testRunner.ThenAsync("Click Logout button", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify User Login HRSale unsuccessfully when missing informations")]
        [NUnit.Framework.CategoryAttribute("TC002")]
        [NUnit.Framework.CategoryAttribute("LoginUnSuccessful")]
        public async System.Threading.Tasks.Task VerifyUserLoginHRSaleUnsuccessfullyWhenMissingInformations()
        {
            string[] tagsOfScenario = new string[] {
                    "TC002",
                    "LoginUnSuccessful"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify User Login HRSale unsuccessfully when missing informations", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 37
 await testRunner.GivenAsync("Navigate to \'HRSale\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "fields",
                            "value"});
                table4.AddRow(new string[] {
                            "Username",
                            ""});
                table4.AddRow(new string[] {
                            "Password",
                            "Super Admin"});
#line 40
 await testRunner.WhenAsync("Input with following Username and Password", ((string)(null)), table4, "When ");
#line hidden
#line 44
 await testRunner.ThenAsync("Verify User login unsuccessfully with message \'The username field is required.\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 47
 await testRunner.GivenAsync("Navigate to \'HRSale\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "fields",
                            "value"});
                table5.AddRow(new string[] {
                            "Username",
                            "Super Admin"});
                table5.AddRow(new string[] {
                            "Password",
                            ""});
#line 48
 await testRunner.WhenAsync("Input with following Username and Password", ((string)(null)), table5, "When ");
#line hidden
#line 52
 await testRunner.ThenAsync("Verify User login unsuccessfully with message \'The password field is required.\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
